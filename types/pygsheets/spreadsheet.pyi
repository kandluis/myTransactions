from pygsheets.custom_types import *
from _typeshed import Incomplete
from pygsheets.datarange import DataRange as DataRange
from pygsheets.developer_metadata import (
    DeveloperMetadata as DeveloperMetadata,
    DeveloperMetadataLookupDataFilter as DeveloperMetadataLookupDataFilter,
)
from pygsheets.exceptions import (
    InvalidArgumentValue as InvalidArgumentValue,
    InvalidUser as InvalidUser,
    RequestError as RequestError,
    WorksheetNotFound as WorksheetNotFound,
)
from pygsheets.worksheet import Worksheet

class Spreadsheet:
    worksheet_cls = Worksheet
    logger: Incomplete
    client: Incomplete
    default_parse: bool
    def __init__(
        self, client, jsonsheet: Incomplete | None = None, id: Incomplete | None = None
    ) -> None: ...
    @property
    def id(self): ...
    @property
    def title(self): ...
    @title.setter
    def title(self, value) -> None: ...
    @property
    def locale(self): ...
    @locale.setter
    def locale(self, value) -> None: ...
    @property
    def sheet1(self): ...
    @property
    def url(self): ...
    @property
    def named_ranges(self): ...
    @property
    def protected_ranges(self): ...
    @property
    def defaultformat(self): ...
    @property
    def updated(self): ...
    def update_properties(self) -> None: ...
    def fetch_properties(
        self, jsonsheet: Incomplete | None = None, fetch_sheets: bool = True
    ) -> None: ...
    def worksheets(
        self,
        sheet_property: Incomplete | None = None,
        value: Incomplete | None = None,
        force_fetch: bool = False,
    ): ...
    def worksheet(self, property: str = "index", value: int = 0): ...
    def worksheet_by_title(self, title: str) -> Worksheet: ...
    def add_worksheet(
        self,
        title,
        rows: int = 100,
        cols: int = 26,
        src_tuple: Incomplete | None = None,
        src_worksheet: Incomplete | None = None,
        index: Incomplete | None = None,
    ): ...
    def del_worksheet(self, worksheet) -> None: ...
    def replace(
        self, pattern, replacement: Incomplete | None = None, **kwargs
    ) -> None: ...
    def find(self, pattern, **kwargs): ...
    def share(
        self, email_or_domain, role: str = "reader", type: str = "user", **kwargs
    ) -> None: ...
    @property
    def permissions(self): ...
    def remove_permission(
        self, email_or_domain, permission_id: Incomplete | None = None
    ) -> None: ...
    def export(self, file_format=..., path: str = "", filename: str = "") -> None: ...
    def delete(self) -> None: ...
    def get_developer_metadata(
        self, key: Incomplete | None = None, search_sheets: bool = False
    ): ...
    def create_developer_metadata(self, key, value: Incomplete | None = None): ...
    def custom_request(self, request, fields, **kwargs): ...
    def to_json(self): ...
    def __eq__(self, other): ...
    def __iter__(self): ...
    def __getitem__(self, item): ...
